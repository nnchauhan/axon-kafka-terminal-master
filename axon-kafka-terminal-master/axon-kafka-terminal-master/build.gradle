apply plugin: 'java'
apply plugin: 'maven' 
apply plugin: 'signing'
apply plugin: 'idea'

group = 'com.viadeo.axonframework'
version = '0.1.1'
ext.packaging = 'jar'

def isDevBuild
def isCiBuild
def isReleaseBuild

def sonatypeRepositoryUrl

//set build variables based on build type (release, continuous integration, development)
if(hasProperty("release")) {
  println "Preparing a release..."
  isReleaseBuild = true
  sonatypeRepositoryUrl = "https://oss.sonatype.org/service/local/staging/deploy/maven2"
} else if (hasProperty("ci")) {
  println "Preparing a snapshot..."
  isCiBuild = true
  version += "-SNAPSHOT"
  sonatypeRepositoryUrl = "https://oss.sonatype.org/content/repositories/snapshots"
} else {
  println "is development build..."
  isDevBuild = true
}

sourceCompatibility = 1.7
targetCompatibility = 1.7

// Use UTF-8 for reading xml (and other) data tests files
tasks.withType(Test) { systemProperty "file.encoding", "UTF-8"  }
tasks.withType(Compile) { options.encoding = "UTF-8" }

task wrapper(type: Wrapper) {
    gradleVersion = '1.10'
}

repositories {
  mavenCentral()
}

dependencies {
  compile('org.apache.kafka:kafka_2.8.0:0.8.1.1') {
    exclude module: 'jms'
    exclude module: 'jmxtools'
    exclude module: 'jmxri'
  }
  compile 'org.axonframework:axon-core:2.0.5'
  compile 'com.google.guava:guava:13.0.1'
  compile 'com.codahale.metrics:metrics-core:3.0.1'

  compile 'org.slf4j:slf4j-api:1.7.5'
  compile 'org.slf4j:jul-to-slf4j:1.7.5'
  compile 'org.slf4j:jcl-over-slf4j:1.7.5'
  compile 'ch.qos.logback:logback-core:1.0.13'
  compile 'ch.qos.logback.contrib:logback-jackson:0.1.2'
  compile 'ch.qos.logback.contrib:logback-json-classic:0.1.2'
  compile 'ch.qos.logback:logback-classic:1.0.13'

  testCompile 'junit:junit:4.11'
  testCompile 'org.mockito:mockito-all:1.9.5-rc1'
  testCompile 'org.powermock:powermock-module-junit4:1.5.3'
  testCompile 'org.powermock:powermock-api-mockito:1.5.3'
}

task sourcesJar(type: Jar) {
  classifier = 'sources'
  from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn:javadoc) {
  classifier = 'javadoc'
  from javadoc.destinationDir
}

artifacts {
  archives jar
  archives javadocJar
  archives sourcesJar
}

if(isReleaseBuild) {
  signing {
    sign configurations.archives
  }
} else {
  task signArchives {
    // do nothing
  }
}

uploadArchives {
  repositories {
    if (isDevBuild) {
      mavenLocal()
    }
    else {
      mavenDeployer {
        if(isReleaseBuild) {
          beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }
        }

        repository(url: sonatypeRepositoryUrl) {
          authentication(userName: sonatypeUsername, password: sonatypePassword)
        }

        pom.project {
          name 'axon-kafka-terminal'
          packaging 'jar'
          description 'Implementation of axon-framework terminal using Kafka (a distributed event bus)'
          url 'http://github.com/viadeo/axon-kafka-terminal'

          scm {
            connection 'scm:git@github.com:viadeo/axon-kafka-terminal.git'
            developerConnection 'scm:git@github.com:viadeo/axon-kafka-terminal.git'
            url 'scm:git@github.com:viadeo/axon-kafka-terminal.git'
          }

          licenses {
            license {
              name 'The Apache Software License, Version 2.0'
              url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
              distribution 'repo'
            }
          }

          developers {
            developer {
              id 'cmurer'
              name 'Cedric Murer'
            }
            developer {
              id 'dstendardi'
              name 'David Stendardi'
            }
          }
        }
      }
    }
  }
}
